generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookmark {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model chart {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  simulation Int
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model follow {
  id                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id                   String?  @db.Uuid
  followee_id                   String?  @db.Uuid
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  user_follow_followee_idTouser user?    @relation("follow_followee_idTouser", fields: [followee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_follow_follower_idTouser user?    @relation("follow_follower_idTouser", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model portfolio {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio        String?  @db.VarChar(255)
  verified   Boolean  @default(false)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stats {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gain               Int
  fail_success_ratio Int
  user_id            String?  @db.Uuid
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  user               user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String      @unique @db.VarChar(255)
  firstName                       String?     @db.VarChar(255)
  lastName                        String?     @db.VarChar(255)
  roq_user_id                     String      @db.VarChar(255)
  tenant_id                       String      @db.VarChar(255)
  created_at                      DateTime    @default(now()) @db.Timestamp(6)
  updated_at                      DateTime    @default(now()) @db.Timestamp(6)
  bookmark                        bookmark[]
  chart                           chart[]
  company                         company[]
  follow_follow_followee_idTouser follow[]    @relation("follow_followee_idTouser")
  follow_follow_follower_idTouser follow[]    @relation("follow_follower_idTouser")
  portfolio                       portfolio[]
  profile                         profile[]
  stats                           stats[]
}
